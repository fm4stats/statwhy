module AlexanderGovern_example
  use cameleerBHL.CameleerBHL
  use alexandergovern.AlexanderGovern
  
  let function p1 : population = NormalD (Param "mean1") (Param "var1")
  let function p2 : population = NormalD (Param "mean2") (Param "var2")
  let function p3 : population = NormalD (Param "mean3") (Param "var3")
  let function p4 : population = NormalD (Param "mean4") (Param "var4")
  
  let function t_m1 = mean p1
  let function t_m2 = mean p2
  let function t_m3 = mean p3
  let function t_m4 = mean p4
  
  let ex_alexandergovern (d1 d2 d3 d4 : (list real))
  (* Executes Alexander-Govern test for 3 population means *)
    requires { is_empty !st /\
               for_all2
                 (fun p y -> sampled y p)
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil))))
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil)))) /\
               ((World !st interp) |= Possible (t_m1 $< t_m2)) /\
               ((World !st interp) |= Possible (t_m1 $> t_m2)) /\
               ((World !st interp) |= Possible (t_m1 $< t_m3)) /\
               ((World !st interp) |= Possible (t_m1 $> t_m3)) /\
               ((World !st interp) |= Possible (t_m1 $< t_m4)) /\
               ((World !st interp) |= Possible (t_m1 $> t_m4)) /\               
               ((World !st interp) |= Possible (t_m2 $< t_m3)) /\
               ((World !st interp) |= Possible (t_m2 $> t_m3)) /\
               ((World !st interp) |= Possible (t_m2 $< t_m4)) /\
               ((World !st interp) |= Possible (t_m2 $> t_m4)) /\
               ((World !st interp) |= Possible (t_m3 $< t_m4)) /\
               ((World !st interp) |= Possible (t_m3 $> t_m4))
             }
    ensures {
      let p = result in
      let h = (t_m1 $!= t_m2) $|| (t_m1 $!= t_m3) $|| (t_m1 $!= t_m4)
        $|| (t_m2 $!= t_m3) $|| (t_m2 $!= t_m4) $|| (t_m3 $!= t_m4) in
      Eq p = compose_pvs h !st &&
      (World !st interp) |= StatB (Eq p) h
    }
    = exec_alexandergovern (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil))))
end
