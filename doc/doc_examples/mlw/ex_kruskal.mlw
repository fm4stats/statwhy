module Kruskal_example
  use cameleerBHL.CameleerBHL
  use kruskal.Kruskal
  
  let function p1 = UnknownD "p1"
  let function p2 = UnknownD "p2"
  let function p3 = UnknownD "p3"

  let function t_m1 = med p1
  let function t_m2 = med p2
  let function t_m3 = med p3 
  
  let ex_kruskal (d1 d2 d3 : (list real))
  (* Executes Kruskal test for 3 population medians *)
    requires { is_empty !st /\
               for_all2
                 (fun p y -> sampled y p)
                 (Cons p1 (Cons p2 (Cons p3 Nil)))
                 (Cons d1 (Cons d2 (Cons d3 Nil))) /\
               ((World !st interp) |= Possible (t_m1 $< t_m2)) /\
               ((World !st interp) |= Possible (t_m1 $> t_m2)) /\
               ((World !st interp) |= Possible (t_m1 $< t_m3)) /\
               ((World !st interp) |= Possible (t_m1 $> t_m3)) /\
               ((World !st interp) |= Possible (t_m2 $< t_m3)) /\
               ((World !st interp) |= Possible (t_m2 $> t_m3))
             }
    ensures {
      let p = result in
      let h = (t_m1 $!= t_m2) $|| (t_m1 $!= t_m3) $|| (t_m2 $!= t_m3) in
      Eq p = compose_pvs h !st &&
      (World !st interp) |= StatB (Eq p) h
    }
    = exec_kruskal (Cons p1 (Cons p2 (Cons p3 Nil))) (Cons d1 (Cons d2 (Cons d3 Nil)))
end
