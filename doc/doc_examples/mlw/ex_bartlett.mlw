module Bartlett_example
  use cameleerBHL.CameleerBHL
  use bartlett.Bartlett
  
  let function p1 : population = NormalD (Param "mean1") (Param "var1")
  let function p2 : population = NormalD (Param "mean2") (Param "var2")
  let function p3 : population = NormalD (Param "mean3") (Param "var3")

  let function t_v1 = var p1
  let function t_v2 = var p2
  let function t_v3 = var p3
  
  let ex_bartlett (d1 d2 d3 : (list real))
  (* Executes Bartlett test for 3 population variances *)
    requires { is_empty !st /\
               for_all2
                 (fun p y -> sampled y p)
                 (Cons p1 (Cons p2 (Cons p3 Nil)))
                 (Cons d1 (Cons d2 (Cons d3 Nil))) /\
               ((World !st interp) |= Possible (t_v1 $< t_v2)) /\
               ((World !st interp) |= Possible (t_v1 $> t_v2)) /\
               ((World !st interp) |= Possible (t_v1 $< t_v3)) /\
               ((World !st interp) |= Possible (t_v1 $> t_v3)) /\
               ((World !st interp) |= Possible (t_v2 $< t_v3)) /\
               ((World !st interp) |= Possible (t_v2 $> t_v3))
             }
    ensures {
      let p = result in
      let h = (t_v1 $!= t_v2) $|| (t_v1 $!= t_v3) $|| (t_v2 $!= t_v3) in
      Eq p = compose_pvs h !st &&
      (World !st interp) |= StatB (Eq p) h
    }
    = exec_bartlett (Cons p1 (Cons p2 (Cons p3 Nil))) (Cons d1 (Cons d2 (Cons d3 Nil)))
end
