module Ttest_ind
  use cameleerBHL.CameleerBHL
  use ftest.Ftest

  let function m1 : parameter = "mean1"
  let function m2 : parameter = "mean2"
  let function v1 : parameter = "var1"
  let function v2 : parameter = "var2"

  let function p1 = NormalD (Param m1) (Param v1)
  let function p2 = NormalD (Param m2) (Param v1)
  
  let ex_ftest (d1 : list real) (d2 : list real) : real
  requires {
    is_empty !st /\
    sampled d1 p1 /\ sampled d2 p2 /\
    non_paired d1 d2 /\
    (World !st interp) |= Possible (var p1 $< var p2) /\
    (World !st interp) |= Possible (var p1 $> var p2)
  }
  ensures {
    let p = result in
    Eq p = compose_pvs (var p1 $!= var p2) !st &&
    (World !st interp) |= StatB (Eq p) (var p1 $!= var p2)
  }
  = exec_ftest p1 p2 (d1, d2) Two
end
