module Utility
  use logicalFormula.LanguageData
  use list.List
  use list.Mem
  use list.Append
  use int.Int
  use int.EuclideanDivision

  let rec function fold (f : 'b -> 'a -> 'b) (acc : 'b) (lst : list 'a) : 'b
    variant { lst }
  = match lst with
    | Nil      -> acc
    | Cons x r -> fold f (f acc x) r
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function fold

  let rec function foldr (f : 'b -> 'a -> 'b) (acc : 'b) (lst : list 'a) : 'b
    variant { lst }
  = match lst with
    | Nil      -> acc
    | Cons x r -> f (foldr f acc r) x
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function foldr

  lemma fold__append:
    forall l1 [@induction] l2: list 'a, f: 'b -> 'a -> 'b, acc : 'b.
    fold f acc (l1++l2) = fold f (fold f acc l1) l2

  let rec function map (f : 'a -> 'b) (lst : list 'a) : list 'b
    variant {lst}
  = match lst with
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (map f xs)
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function map

  let function for_all (p: 'a -> bool) (l:list 'a) : bool
    ensures { result <-> (forall x. mem x l -> p x) }
  = fold (fun acc x -> acc && p x) true l
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function for_all

  use list.Combine
  use list.Length

  let function for_all2 (p: 'a -> 'b -> bool) (l:list 'a) (r:list 'b) : bool
    requires { length l = length r }
    ensures { result <-> forall x, y. mem (x,y) (combine l r) -> p x y }
  = fold (fun acc t -> let (x, y) = t in acc && p x y) true (combine l r)
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function for_all2

  let rec function for_some (p: 'a -> bool) (l:list 'a) : bool
    ensures { result <-> exists x. mem x l /\ p x }
  = fold (fun acc x -> acc || p x) false l

  let function mem_list (eq:'a -> 'a -> bool) (x:'a) (l:list 'a) : bool
    ensures  { result <-> exists y. mem y l /\ eq x y }
  =
    for_some (eq x) l
  meta "compute_max_steps" 1_000_000


  let rec function aux (x : term) (ys : list term) (pred : string) : list formula
    variant { ys }
  = match ys with
    | Nil -> Nil
    | Cons y ys -> Cons (Atom (Pred pred (Cons x (Cons y Nil)))) (aux x ys pred)
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function aux

  let rec function combinations (lst : list term) (acc : list formula) (pred : string) : list formula
    variant { lst }
  = match lst with
    | Nil -> acc
    | Cons x tl -> let new_comb = aux x tl pred in
                   combinations tl (acc ++ new_comb) pred
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function combinations

  lemma combinations_3:
    forall t1 t2 t3: term, pred : string.
    combinations (Cons t1 (Cons t2 (Cons t3 Nil))) Nil pred = Cons (Atom (Pred pred (Cons t1 (Cons t2 Nil)))) (Cons (Atom (Pred pred (Cons t1 (Cons t3 Nil)))) (Cons (Atom (Pred pred (Cons t2 (Cons t3 Nil)))) Nil))

  use list.Length
  use int.ComputerDivision
  use list.NthNoOpt
  
  lemma lem_combinations_length:
    forall lst, pred.
    length (combinations lst Nil pred) = div ((length lst) * (length lst - 1) ) 2

  let rec function enumerate (l : list 'a) (acc : int) : list (int, 'a)
    variant { l }
  = match l with
    | Nil -> Nil
    | Cons x r -> Cons (acc, x) (enumerate r (acc+1))
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function enumerate
end
