module Williams
  use cameleerBHL.CameleerBHL
  use int.ComputerDivision
  use list.Combine
  use array.Array

  let function (+::) (xs : list 'a) (x : 'a) : list 'a = Cons x xs

  let function div2 [@rewrite] (r : int) : int = div r 2

  function cmb_store (cmbs : list formula) (ps : array real) (i : int) : store
  = match cmbs with
    | Cons f fs -> Cons ("williams", f, Eq (ps[i])) (cmb_store fs ps (i + 1))
    | Nil -> Nil
    end
  meta "rewrite_def" function cmb_store

  function tl (l : list 'a) : list 'a
  
  axiom tl_def [@rewrite]:
    forall l : list 'a, x : 'a.
      tl (Cons x l) = l

  val exec_williams (ppls : list population) (control_ppl : population)
                    (ys : dataset (list (list real))) (c : dataset (list real))
                    (alt : alternative) : array real
  writes { st }
  requires {
    Length.length ppls = Length.length ys /\
    for_all2 (fun p y -> match p with NormalD _ _ -> sampled y p | _ -> false end) ppls ys /\
    (match control_ppl with NormalD _ _ -> sampled c control_ppl | _ -> false end) /\
    for_all (fun p -> (World !st interp) |= eq_variance control_ppl p) ppls /\      
    match alt with
    | Two -> false
    | Up ->
      for_all
        (fun p ->
          (World !st interp) |= Possible (mean control_ppl >' mean p) /\
          (World !st interp) |= Not (Possible (mean control_ppl <' mean p)))
        ppls /\
      for_all (fun t -> let (p1, p2) = t in
                (World !st interp) |= Know (mean p1 <=' mean p2))
              (combine (ppls ++ (Cons control_ppl Nil)) (tl (ppls ++ (Cons control_ppl Nil))))
    | Low ->
      for_all
        (fun p ->
          (World !st interp) |= Not (Possible (mean control_ppl >' mean p)) /\
          (World !st interp) |= Possible (mean control_ppl <' mean p))
        ppls /\
      for_all (fun t -> let (p1, p2) = t in
                (World !st interp) |= Know (mean p1 >=' mean p2))
              (combine ppls (tl ppls))
    end
  } ensures {
    let ps = result in
    length ps = Length.length ppls /\
    let b = length ps in
    (forall i : int. 0 <= i < b -> pvalue (ps[i])) /\
    (forall i : int. 0 <= i < (b - 1) -> ps[i] <=. ps[i+1]) /\
    let cmbs = map (fun t -> match alt with
                             | Two -> Atom (Pred "nil" Nil)
                             | Up -> mean control_ppl >' mean t
                             | Low -> mean control_ppl <' mean t
                             end)
                   ppls in
    !st = (cmb_store cmbs ps 0) ++ !(old st)
  }
end
