(*
The specification is based on scipy.stats.ks_1samp and scipy.stats.ks_2samp.
ks_1samp: https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_1samp.html#scipy.stats.ks_1samp
ks_2samp: https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_2samp.html#scipy.stats.ks_2samp
*)
module Ks
  use cameleerBHL.CameleerBHL

  val exec_ks_1samp (p_obs : population) (p_null : population) (y : dataset (list real)) : real
  writes { st }
  requires {
    sampled y p_obs /\
    is_known p_null /\
    (World !st interp) |= Possible (p_obs $!=^ p_null)
  } ensures {
    let pv = result in
    pvalue result /\
    !st = Cons ("ks_1samp", (p_obs $!=^ p_null), Eq pv) !(old st)
  }

  val exec_ks_2samp (p1 : population) (p2 : population) (y : dataset (list real, list real)) : real
  writes { st }
  requires {
    match y with
    | (y1, y2) ->
      sampled y1 p1 /\ sampled y2 p2 /\
      non_paired y1 y2 /\
      (World !st interp) |= Possible (p1 $!=^ p2)
    end
  } ensures {
    let pv = result in
    pvalue result /\
    !st = Cons ("ks_2samp", (p1 $!=^ p2), Eq pv) !(old st)
  }
end
