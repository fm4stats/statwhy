module Steel
  use cameleerBHL.CameleerBHL
  use int.ComputerDivision
  use list.Combine
  use array.Array

  let function (+::) (xs : list 'a) (x : 'a) : list 'a = Cons x xs

  let function div2 [@rewrite] (r : int) : int = div r 2

  function cmb_store (cmbs : list formula) (ps : array real) (i : int) : store
  = match cmbs with
    | Cons f fs -> Cons ("steel", f, Eq (ps[i])) (cmb_store fs ps (i + 1))
    | Nil -> Nil
    end
  meta "rewrite_def" function cmb_store

  val exec_steel (ppls : list population) (control_ppl : population)
                 (ys : dataset (list (list real))) (c : dataset (list real))
                 (alt : alternative) : array real
  writes { st }
  requires {
    Length.length ppls = Length.length ys /\
    for_all2 sampled ys ppls /\ sampled c control_ppl /\
    for_all (fun p -> (World !st interp) |= eq_variance control_ppl p) ppls /\
    match alt with
    | Two -> for_all
               (fun p ->
                 (World !st interp) |= Possible (mean control_ppl $< mean p) /\
                 (World !st interp) |= Possible (mean control_ppl $> mean p))
               ppls
    | Up -> for_all
              (fun p ->
                (World !st interp) |= Possible (mean control_ppl $> mean p) /\
                (World !st interp) |= Not (Possible (mean control_ppl $< mean p)))
              ppls
    | Low -> for_all
               (fun p ->
                 (World !st interp) |= Not (Possible (mean control_ppl $> mean p)) /\
                 (World !st interp) |= Possible (mean control_ppl $< mean p))
             ppls
    end
  } ensures {
    let ps = result in
    length ps = Length.length ppls /\
    let b = length ps in
    (forall i : int. 0 <= i < b -> pvalue (ps[i])) /\
    let cmbs = map (fun t -> match alt with
                             | Two -> mean control_ppl $!= mean t
                             | Up -> mean control_ppl $> mean t
                             | Low -> mean control_ppl $< mean t
                             end)
                   ppls in
    !st = (cmb_store cmbs ps 0) ++ !(old st)
  }
end
