module Binom
  use cameleerBHL.CameleerBHL

  val exec_binom_test (p : population) (k : 'a -> bool) (p0 : real) (y : dataset (list 'a)) (alt : alternative) : real
  writes { st }
  requires {
  match p with
  | (BernoulliD _) ->
  let p0 = const_term p0 in
  let p = bernoullip p in
  match alt with
  | Two ->
    (World !st interp) |= Possible (p <' p0) /\
    (World !st interp) |= Possible (p >' p0)
  | Up ->
    (World !st interp) |= Not (Possible (p <' p0)) /\
    (World !st interp) |= Possible (p >' p0)
  | Low ->
    (World !st interp) |= Possible (p <' p0) /\
    (World !st interp) |= Not (Possible (p >' p0)) end
  | _ -> false
  end
  } ensures {
    let pv = result in
    pvalue result /\
    let p = bernoullip p in
    let p0 = const_term p0 in
    let h = match alt with
      | Two -> p =!' p0
      | Up -> p >' p0
      | Low -> p <' p0
    end in !st = !(old st) ++ Cons ("binom_test", h, Eq pv) Nil
  }

end
