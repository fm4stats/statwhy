module Utility
  use logicalFormula.LanguageData
  use list.List
  use list.Mem
  use list.Append
  use int.Int
  use export hof.Hof
  use list.Length

  let rec function aux (x : term) (ys : list term) (pred : string) : list formula
    (* variant { ys } *)
  = match ys with
    | Nil -> Nil
    | Cons y ys -> Cons (Atom (Pred pred (Cons x (Cons y Nil)))) (aux x ys pred)
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function aux
  
  lemma lem_aux_length:
    forall x, ys [@induction], pred. length (aux x ys pred) = length ys

  let rec function combinations (lst : list term)  (pred : string) : list formula
    (* variant { lst } *)
  = match lst with
    | Nil -> Nil
    | Cons x tl -> let new_comb = aux x tl pred in
                   new_comb ++ combinations tl pred
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function combinations

  use list.Length
  use int.ComputerDivision
  use list.NthNoOpt
  
  lemma lem_combinations_length:
    forall lst, pred.
    length (combinations lst pred) = div ((length lst) * (length lst - 1) ) 2

  let rec function enumerate (l : list 'a) (acc : int) : list (int, 'a)
    variant { l }
  = match l with
    | Nil -> Nil
    | Cons x r -> Cons (acc, x) (enumerate r (acc+1))
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function enumerate

  let rec function aux_poly (x : 'a) (ys : list 'a) : list ('a, 'a)
  = match ys with
    | Nil -> Nil
    | Cons y ys -> Cons (x, y) (aux_poly x ys)
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function aux_poly

  let rec function combinations_poly (lst : list 'a) : list ('a, 'a)
  = match lst with
    | Nil -> Nil
    | Cons x tl -> let new_comb = aux_poly x tl in
                   new_comb ++ combinations_poly tl
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function combinations_poly
  
end

