(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require HighOrd.
Require int.Int.
Require list.List.
Require list.Length.
Require list.Mem.
Require list.Append.

(* Why3 assumption *)
Fixpoint fold {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
  (f:b -> a -> b) (acc:b) (lst:Init.Datatypes.list a) {struct lst}: b :=
  match lst with
  | Init.Datatypes.nil => acc
  | Init.Datatypes.cons x r => fold f (f acc x) r
  end.

(* Why3 assumption *)
Fixpoint foldr {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
  (f:b -> a -> b) (acc:b) (lst:Init.Datatypes.list a) {struct lst}: b :=
  match lst with
  | Init.Datatypes.nil => acc
  | Init.Datatypes.cons x r => f (foldr f acc r) x
  end.

Axiom fold__append :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (l1:Init.Datatypes.list a) (l2:Init.Datatypes.list a)
    (f:b -> a -> b) (acc:b),
  ((fold f acc (Init.Datatypes.app l1 l2)) = (fold f (fold f acc l1) l2)).

(* Why3 assumption *)
Fixpoint map {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b} (f:a -> b)
  (lst:Init.Datatypes.list a) {struct lst}: Init.Datatypes.list b :=
  match lst with
  | Init.Datatypes.nil => Init.Datatypes.nil
  | Init.Datatypes.cons x xs => Init.Datatypes.cons (f x) (map f xs)
  end.

Parameter result:
  forall {a:Type} {a_WT:WhyType a}, (a -> Init.Datatypes.bool) ->
  Init.Datatypes.bool -> a -> Init.Datatypes.bool.

Axiom result'def :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> Init.Datatypes.bool) (acc:Init.Datatypes.bool) (x:a),
  ((result p acc x) = Init.Datatypes.true) <->
  (acc = Init.Datatypes.true) /\ ((p x) = Init.Datatypes.true).

(* Why3 assumption *)
Definition for_all {a:Type} {a_WT:WhyType a} (p:a -> Init.Datatypes.bool)
    (l:Init.Datatypes.list a) : Init.Datatypes.bool :=
  fold (result p) Init.Datatypes.true l.

(* Why3 goal *)
Theorem for_all_correctness {a:Type} {a_WT:WhyType a} :
  forall (p:a -> Init.Datatypes.bool) (l:Init.Datatypes.list a),
  ((for_all p l) = Init.Datatypes.true) <->
  (forall (x:a), list.Mem.mem x l -> ((p x) = Init.Datatypes.true)).
Proof.
intros p l.

Qed.

