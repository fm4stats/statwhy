module Poisson
  use cameleerBHL.CameleerBHL

  val exec_poisson_means_test (p1 : term) (p2 : term) (d1 : dataset (int,real)) (d2 : dataset (int,real)) (alt : alternative) : real
  writes { st }
  requires {
    (exists p1':real_invisible, s1:int. p1 = Real s1 p1') /\
    (exists p2':real_invisible, s2:int. p2 = Real s2 p2') /\
    is_poisson (ppl d1) /\ is_poisson (ppl d2) /\
    match alt with
    | Two ->
      (World !st interp) |= Possible (Atom (Pred "<" (Cons p1 (Cons p2 Nil)))) /\
      (World !st interp) |= Possible (Atom (Pred ">" (Cons p1 (Cons p2 Nil))))
    | Up ->
      (World !st interp) |= Not (Possible (Atom (Pred "<" (Cons p1 (Cons p2 Nil))))) /\
      (World !st interp) |= Possible (Atom (Pred ">" (Cons p1 (Cons p2 Nil))))
    | Low ->
      (World !st interp) |= Possible (Atom (Pred "<" (Cons p1 (Cons p2 Nil)))) /\
      (World !st interp) |= Not (Possible (Atom (Pred "<" (Cons p1 (Cons p2 Nil))))) end
  } ensures {
    let pv = result in
    pvalue result /\
    let h = match alt with
      | Two -> Pred "=!" (Cons p1 (Cons p2 Nil))
      | Up -> Pred ">" (Cons p1 (Cons p2 Nil))
      | Low -> Pred "<" (Cons p1 (Cons p2 Nil))
    end in !st = !(old st) ++ Cons ("poisson_means_test", Atom h, Eq pv) Nil
  }
end
