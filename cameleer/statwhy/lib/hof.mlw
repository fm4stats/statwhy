module Hof
  use list.List
  use list.Append
  use list.Mem
  
  let rec function fold (f : 'b -> 'a -> 'b) (acc : 'b) (lst : list 'a) : 'b
  = match lst with
    | Nil      -> acc
    | Cons x r -> fold f (f acc x) r
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function fold

  let rec function foldr (f : 'b -> 'a -> 'b) (acc : 'b) (lst : list 'a) : 'b
  = match lst with
    | Nil      -> acc
    | Cons x r -> f (foldr f acc r) x
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function foldr

  lemma fold__append:
    forall l1 [@induction] l2: list 'a, f: 'b -> 'a -> 'b, acc : 'b.
    fold f acc (l1++l2) = fold f (fold f acc l1) l2

  let rec function map (f : 'a -> 'b) (lst : list 'a) : list 'b
  = match lst with
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (map f xs)
    end
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function map

  let function for_all (p: 'a -> bool) (l:list 'a) : bool
  = fold (fun acc t -> acc && p t) true l
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function for_all

  lemma for_all_correctness:
    forall p : 'a -> bool, l : list 'a.
      for_all p l <-> (forall x: 'a. mem x l -> p x)

  use list.Combine
  use list.Length

  let function for_all2 (p: 'a -> 'b -> bool) (l:list 'a) (r:list 'b) : bool
  = fold (fun acc t -> let (x, y) = t in acc && p x y) true (combine l r)
  meta "compute_max_steps" 1_000_000
  meta "rewrite_def" function for_all2

  let function for_some (p: 'a -> bool) (l:list 'a) : bool
  = fold (fun acc x -> acc || p x) false l

  let function mem_list (eq:'a -> 'a -> bool) (x:'a) (l:list 'a) : bool
  = for_some (eq x) l
  meta "compute_max_steps" 1_000_000
end
