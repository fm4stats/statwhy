module Dunnett
  use cameleerBHL.CameleerBHL
  use int.ComputerDivision
  use list.Combine
  use array.Array

  let function (+::) (xs : list 'a) (x : 'a) : list 'a = Cons x xs

  let function div2 [@rewrite] (r : int) : int = div r 2

  function cmb_store (cmbs : list formula) (ps : array real) (i : int) : store
  = match cmbs with
    | Cons f fs -> Cons ("dunnett", f, Eq (ps[i])) (cmb_store fs ps (i + 1))
    | Nil -> Nil
    end
  meta "rewrite_def" function cmb_store

  (* let rec function cmb_aux (t : term) (l : list term) : list (term, term) *)
  (*   variant { l } *)
  (* = match l with *)
  (*   | Cons y ys -> Cons (t,y) (cmb_aux t ys) *)
  (*   | Nil -> Nil *)
  (*   end *)
  (* meta "rewrite_def" function cmb_store *)
  
  (* let rec function cmb_term (l : list term) : list (term, term) *)
  (*   variant { l } *)
  (*   = match l with *)
  (*   | Cons x xs -> (cmb_aux x xs) ++ (cmb_term xs) *)
  (*   | Nil -> Nil *)
  (*   end *)
  (* meta "rewrite_def" function cmb_store *)

  val exec_dunnett (ppls : list population) (control_ppl : population)
                   (ys : dataset (list (list real))) (c : dataset (list real)): array real
  writes { st }
  requires {
    Length.length ppls = Length.length ys /\
    for_all2 (fun p y -> match p with NormalD _ _ -> sampled y p | _ -> false end) ppls ys /\
    (match control_ppl with NormalD _ _ -> sampled c control_ppl | _ -> false end) /\
    (forall x y : population. mem x (Cons control_ppl ppls) /\ mem y (Cons control_ppl ppls) -> eq_variance x y) /\
    for_all
      (fun p ->
        (World !st interp) |= Possible (mean control_ppl <' mean p) /\
        (World !st interp) |= Possible (mean control_ppl >' mean p))
        ppls
  } ensures {
    let ps = result in
    length ps = Length.length ppls /\
    let b = length ps in
    (forall i : int. 0 <= i < b -> pvalue (ps[i])) /\
    let cmbs = map (fun t -> mean control_ppl =!' mean t) ppls in
    !st = (cmb_store cmbs ps 0) ++ !(old st)
  }

  (* val exec_dunnett4 (terms : list term) (control_term : term) *)
  (*                   (ys : dataset (list (list real))) (cs : dataset (list real)): list real *)
  (* writes { st } *)
  (* requires { *)
  (*   length terms = length ys = 4 /\ *)
  (*   fold (fun acc t -> acc /\ exists r:real_invisible, s:int. t = Real s r) true (Cons control_term terms) /\ *)
  (*   (forall y : list real. mem y (Cons cs ys) -> is_normal (ppl y)) /\ *)
  (*   (forall x y : dataset (list real). mem x (Cons cs ys) /\ mem y (Cons cs ys) -> eq_variance (ppl x) (ppl y)) /\ *)
  (*   fold (fun acc t -> let (s,t) = t in *)
  (*         acc /\ ((World !st interp) |= Possible (Atom (Pred "<" (Cons s (Cons t Nil)))) /\ *)
  (*               (World !st interp) |= Possible (Atom (Pred ">" (Cons s (Cons t Nil)))))) *)
  (*        true *)
  (*        (cmb_aux control_term terms) *)
  (* } ensures { *)
  (*   let ps = result in *)
  (*   length ps = 4 /\ *)
  (*   exists p1 p2 p3 p4:real. ps = Nil +:: p4 +:: p3 +:: p2 +:: p1 /\ *)
  (*   (forall p : real. mem p ps -> pvalue p) /\ *)
  (*   let cmbs = map (fun t -> Atom (Pred "=!" (Cons control_term (Cons t Nil)))) terms in *)
  (*   !st = (cmb_store cmbs ps) ++ !(old st) *)
  (* } *)

  (* val exec_dunnett5 (terms : list term) (control_term : term) *)
  (*                   (ys : dataset (list (list real))) (cs : dataset (list real)): list real *)
  (* writes { st } *)
  (* requires { *)
  (*   length terms = length ys = 5 /\ *)
  (*   fold (fun acc t -> acc /\ exists r:real_invisible, s:int. t = Real s r) true (Cons control_term terms) /\ *)
  (*   (forall y : list real. mem y (Cons cs ys) -> is_normal (ppl y)) /\ *)
  (*   (forall x y : dataset (list real). mem x (Cons cs ys) /\ mem y (Cons cs ys) -> eq_variance (ppl x) (ppl y)) /\ *)
  (*   fold (fun acc t -> let (s,t) = t in *)
  (*         acc /\ ((World !st interp) |= Possible (Atom (Pred "<" (Cons s (Cons t Nil)))) /\ *)
  (*               (World !st interp) |= Possible (Atom (Pred ">" (Cons s (Cons t Nil)))))) *)
  (*        true *)
  (*        (cmb_aux control_term terms) *)
  (* } ensures { *)
  (*   let ps = result in *)
  (*   length ps = 5 /\ *)
  (*   exists p1 p2 p3 p4 p5:real. ps = Nil +:: p5 +:: p4 +:: p3 +:: p2 +:: p1 /\ *)
  (*   (forall p : real. mem p ps -> pvalue p) /\ *)
  (*   let cmbs = map (fun t -> Atom (Pred "=!" (Cons control_term (Cons t Nil)))) terms in *)
  (*   !st = (cmb_store cmbs ps) ++ !(old st) *)
  (* } *)

  (* val exec_dunnett6 (terms : list term) (control_term : term) *)
  (*                   (ys : dataset (list (list real))) (cs : dataset (list real)): list real *)
  (* writes { st } *)
  (* requires { *)
  (*   length terms = length ys = 6 /\ *)
  (*   fold (fun acc t -> acc /\ exists r:real_invisible, s:int. t = Real s r) true (Cons control_term terms) /\ *)
  (*   (forall y : list real. mem y (Cons cs ys) -> is_normal (ppl y)) /\ *)
  (*   (forall x y : dataset (list real). mem x (Cons cs ys) /\ mem y (Cons cs ys) -> eq_variance (ppl x) (ppl y)) /\ *)
  (*   fold (fun acc t -> let (s,t) = t in *)
  (*         acc /\ ((World !st interp) |= Possible (Atom (Pred "<" (Cons s (Cons t Nil)))) /\ *)
  (*               (World !st interp) |= Possible (Atom (Pred ">" (Cons s (Cons t Nil)))))) *)
  (*        true *)
  (*        (cmb_aux control_term terms) *)
  (* } ensures { *)
  (*   let ps = result in *)
  (*   length ps = 6 /\ *)
  (*   exists p1 p2 p3 p4 p5 p6:real. ps = Nil +:: p6 +:: p5 +:: p4 +:: p3 +:: p2 +:: p1 /\ *)
  (*   (forall p : real. mem p ps -> pvalue p) /\ *)
  (*   let cmbs = map (fun t -> Atom (Pred "=!" (Cons control_term (Cons t Nil)))) terms in *)
  (*   !st = (cmb_store cmbs ps) ++ !(old st) *)
  (* } *)

  (* val exec_dunnett7 (terms : list term) (control_term : term) *)
  (*                   (ys : dataset (list (list real))) (cs : dataset (list real)): list real *)
  (* writes { st } *)
  (* requires { *)
  (*   length terms = length ys = 7 /\ *)
  (*   fold (fun acc t -> acc /\ exists r:real_invisible, s:int. t = Real s r) true (Cons control_term terms) /\ *)
  (*   (forall y : list real. mem y (Cons cs ys) -> is_normal (ppl y)) /\ *)
  (*   (forall x y : dataset (list real). mem x (Cons cs ys) /\ mem y (Cons cs ys) -> eq_variance (ppl x) (ppl y)) /\ *)
  (*   fold (fun acc t -> let (s,t) = t in *)
  (*         acc /\ ((World !st interp) |= Possible (Atom (Pred "<" (Cons s (Cons t Nil)))) /\ *)
  (*               (World !st interp) |= Possible (Atom (Pred ">" (Cons s (Cons t Nil)))))) *)
  (*        true *)
  (*        (cmb_aux control_term terms) *)
  (* } ensures { *)
  (*   let ps = result in *)
  (*   length ps = 7 /\ *)
  (*   exists p1 p2 p3 p4 p5 p6 p7:real. ps = Nil +:: p7 +:: p6 +:: p5 +:: p4 +:: p3 +:: p2 +:: p1 /\ *)
  (*   (forall p : real. mem p ps -> pvalue p) /\ *)
  (*   let cmbs = map (fun t -> Atom (Pred "=!" (Cons control_term (Cons t Nil)))) terms in *)
  (*   !st = (cmb_store cmbs ps) ++ !(old st) *)
  (* } *)

  (* val exec_dunnett8 (terms : list term) (control_term : term) *)
  (*                   (ys : dataset (list (list real))) (cs : dataset (list real)): list real *)
  (* writes { st } *)
  (* requires { *)
  (*   length terms = length ys = 8 /\ *)
  (*   fold (fun acc t -> acc /\ exists r:real_invisible, s:int. t = Real s r) true (Cons control_term terms) /\ *)
  (*   (forall y : list real. mem y (Cons cs ys) -> is_normal (ppl y)) /\ *)
  (*   (forall x y : dataset (list real). mem x (Cons cs ys) /\ mem y (Cons cs ys) -> eq_variance (ppl x) (ppl y)) /\ *)
  (*   fold (fun acc t -> let (s,t) = t in *)
  (*         acc /\ ((World !st interp) |= Possible (Atom (Pred "<" (Cons s (Cons t Nil)))) /\ *)
  (*               (World !st interp) |= Possible (Atom (Pred ">" (Cons s (Cons t Nil)))))) *)
  (*        true *)
  (*        (cmb_aux control_term terms) *)
  (* } ensures { *)
  (*   let ps = result in *)
  (*   length ps = 8 /\ *)
  (*   exists p1 p2 p3 p4 p5 p6 p7 p8:real. ps = Nil +:: p8 +:: p7 +:: p6 +:: p5 +:: p4 +:: p3 +:: p2 +:: p1 /\ *)
  (*   (forall p : real. mem p ps -> pvalue p) /\ *)
  (*   let cmbs = map (fun t -> Atom (Pred "=!" (Cons control_term (Cons t Nil)))) terms in *)
  (*   !st = (cmb_store cmbs ps) ++ !(old st) *)
  (* } *)

  (* val exec_dunnett9 (terms : list term) (control_term : term) *)
  (*                   (ys : dataset (list (list real))) (cs : dataset (list real)): list real *)
  (* writes { st } *)
  (* requires { *)
  (*   length terms = length ys = 9 /\ *)
  (*   fold (fun acc t -> acc /\ exists r:real_invisible, s:int. t = Real s r) true (Cons control_term terms) /\ *)
  (*   (forall y : list real. mem y (Cons cs ys) -> is_normal (ppl y)) /\ *)
  (*   (forall x y : dataset (list real). mem x (Cons cs ys) /\ mem y (Cons cs ys) -> eq_variance (ppl x) (ppl y)) /\ *)
  (*   fold (fun acc t -> let (s,t) = t in *)
  (*         acc /\ ((World !st interp) |= Possible (Atom (Pred "<" (Cons s (Cons t Nil)))) /\ *)
  (*               (World !st interp) |= Possible (Atom (Pred ">" (Cons s (Cons t Nil)))))) *)
  (*        true *)
  (*        (cmb_aux control_term terms) *)
  (* } ensures { *)
  (*   let ps = result in *)
  (*   length ps = 9 /\ *)
  (*   exists p1 p2 p3 p4 p5 p6 p7 p8 p9:real. *)
  (*      ps = Nil +:: p9 +:: p8 +:: p7 +:: p6 +:: p5 +:: p4 +:: p3 +:: p2 +:: p1 /\ *)
  (*   (forall p : real. mem p ps -> pvalue p) /\ *)
  (*   let cmbs = map (fun t -> Atom (Pred "=!" (Cons control_term (Cons t Nil)))) terms in *)
  (*   !st = (cmb_store cmbs ps) ++ !(old st) *)
  (* } *)

  (* val exec_dunnett10 (terms : list term) (control_term : term) *)
  (*                   (ys : dataset (list (list real))) (cs : dataset (list real)): list real *)
  (* writes { st } *)
  (* requires { *)
  (*   length terms = length ys = 10 /\ *)
  (*   fold (fun acc t -> acc /\ exists r:real_invisible, s:int. t = Real s r) true (Cons control_term terms) /\ *)
  (*   (forall y : list real. mem y (Cons cs ys) -> is_normal (ppl y)) /\ *)
  (*   (forall x y : dataset (list real). mem x (Cons cs ys) /\ mem y (Cons cs ys) -> eq_variance (ppl x) (ppl y)) /\ *)
  (*   fold (fun acc t -> let (s,t) = t in *)
  (*         acc /\ ((World !st interp) |= Possible (Atom (Pred "<" (Cons s (Cons t Nil)))) /\ *)
  (*               (World !st interp) |= Possible (Atom (Pred ">" (Cons s (Cons t Nil)))))) *)
  (*        true *)
  (*        (cmb_aux control_term terms) *)
  (* } ensures { *)
  (*   let ps = result in *)
  (*   length ps = 10 /\ *)
  (*   exists p1 p2 p3 p4 p5 p6 p7 p8 p9 p10:real. *)
  (*     ps = Nil +:: p10 +:: p9 +:: p8 +:: p7 +:: p6 +:: p5 +:: p4 +:: p3 +:: p2 +:: p1 /\ *)
  (*   (forall p : real. mem p ps -> pvalue p) /\ *)
  (*   let cmbs = map (fun t -> Atom (Pred "=!" (Cons control_term (Cons t Nil)))) terms in *)
  (*   !st = (cmb_store cmbs ps) ++ !(old st) *)
  (* } *)
end
