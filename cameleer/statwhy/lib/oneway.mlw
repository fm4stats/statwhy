module Oneway
  use cameleerBHL.CameleerBHL

  function oneway_hypothesis (terms : list population) : formula =
    let terms = map (fun t -> RealT (mean t)) terms in
    match combinations terms "=!" with
      | Cons hd tl -> fold (fun acc t -> acc /\* t) hd tl
      | Nil -> Atom (Pred "nil" Nil)
    end

  val exec_oneway (ps : list population) (ys : dataset (list (list real))) : real
  writes { st }
  requires {
    length ps = length ys &&
    length ps >= 2 /\ length ys >= 2 &&
    for_all2 (fun p y -> match p with | NormalD _ _ -> sampled y p | _ -> false end) ps ys /\
    (forall p q : population. mem p ps /\ mem q ps ->
      (World !st interp) |= eq_variance p q) /\
    (forall s t : population. mem s ps /\ mem t ps /\ not eq_population s t ->
      ((World !st interp) |= Possible (mean s <' mean t) /\
       (World !st interp) |= Possible (mean s >' mean t)))
  } ensures {
    let pv = result in
    pvalue result /\
    let h = oneway_hypothesis ps in
    !st = !(old st) ++ Cons ("oneway", h, Eq pv) Nil
  }
end
