module Steel_example
  use cameleerBHL.CameleerBHL
  use steel.Steel
  use array.Array

  let function p0  = UnknownD "p0"
  let function t_mu0 = RealT (mean p0)

  let function p1 = UnknownD "p1"
  let function p2 = UnknownD "p2"
  let function p3 = UnknownD "p3"
  let function p4 = UnknownD "p4"
  let function p5 = UnknownD "p5"
  let function p6 = UnknownD "p6"
  let function p7 = UnknownD "p7"

  let ex_steel1 (d1 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 Nil)
                 (Cons p1 Nil) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 Nil) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 <' mean p) /\
                           (World !st interp) |= Possible (mean p0 >' mean p))
                 (Cons p1 Nil)
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 =!' mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 =!' mean p)))
              (enumerate (Cons p1 Nil) 0)
    }
    = exec_steel (Cons p1 Nil) p0 (Cons d1 Nil) c

  let ex_steel2 (d1 d2 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 Nil))
                 (Cons p1 (Cons p2 Nil)) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 (Cons p2 Nil)) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 <' mean p) /\
                           (World !st interp) |= Possible (mean p0 >' mean p))
                 (Cons p1 (Cons p2 Nil))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 =!' mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 =!' mean p)))
              (enumerate (Cons p1 (Cons p2 Nil)) 0)
    }
    = exec_steel (Cons p1 (Cons p2 Nil)) p0 (Cons d1 (Cons d2 Nil)) c


  let ex_steel3 (d1 d2 d3 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 Nil)))
                 (Cons p1 (Cons p2 (Cons p3 Nil))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 (Cons p2 (Cons p3 Nil))) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 <' mean p) /\
                           (World !st interp) |= Possible (mean p0 >' mean p))
                 (Cons p1 (Cons p2 (Cons p3 Nil)))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 =!' mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 =!' mean p)))
              (enumerate (Cons p1 (Cons p2 (Cons p3 Nil))) 0)
    }
    = exec_steel (Cons p1 (Cons p2 (Cons p3 Nil))) p0 (Cons d1 (Cons d2 (Cons d3 Nil))) c

  let ex_steel4 (d1 d2 d3 d4 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 <' mean p) /\
                           (World !st interp) |= Possible (mean p0 >' mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 =!' mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 =!' mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil))))
                0)
    }
    = exec_steel (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) p0 (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil)))) c

  let ex_steel5 (d1 d2 d3 d4 d5 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 <' mean p) /\
                           (World !st interp) |= Possible (mean p0 >' mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 =!' mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 =!' mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
                0)
    }
    = exec_steel (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) p0
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil))))) c

  let ex_steel6 (d1 d2 d3 d4 d5 d6 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 Nil))))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil)))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil)))))) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 <' mean p) /\
                           (World !st interp) |= Possible (mean p0 >' mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil))))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 =!' mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 =!' mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil))))))
                0)
    }
    = exec_steel (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil)))))) p0
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 Nil)))))) c

  let ex_steel7 (d1 d2 d3 d4 d5 d6 d7 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 Nil)))))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil))))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil))))))) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 <' mean p) /\
                           (World !st interp) |= Possible (mean p0 >' mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil)))))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 =!' mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 =!' mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil)))))))
                0)
    }
    = exec_steel
        (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil))))))) p0
        (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 Nil))))))) c

end
