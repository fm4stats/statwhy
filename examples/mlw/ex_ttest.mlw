module Ttest_1samp
  use cameleerBHL.CameleerBHL
  use ttest.Ttest

  let function m : parameter = "mean1"
  let function v : parameter = "var1"
  let function pp = NormalD (Param m) (Param v)
  
  let ex_ttest_1samp (d : list real) : real
  requires {
    is_empty !st /\
    sampled d pp /\
    (World !st interp) |= Possible (mean pp <' const_term 0.0) /\
    (World !st interp) |= Possible (mean pp >' const_term 0.0)
  }
  ensures {
    let p = result in
    Eq p = compose_pvs (mean pp =!' const_term 0.0) !st &&
    (World !st interp) |= StatB (Eq p) (mean pp =!' const_term 0.0)
  }
  = exec_ttest_1samp pp 0.0 d Two

end

module Ttest_ind
  use cameleerBHL.CameleerBHL
  use ttest.Ttest

  let function m1 : parameter = "mean1"
  let function m2 : parameter = "mean2"
  let function v1 : parameter = "var1"
  let function v2 : parameter = "var2"

  let function p1 = NormalD (Param m1) (Param v1)
  let function p2 = NormalD (Param m2) (Param v2)
  
  let ex_ttest_ind_eq (d1 : list real) (d2 : list real) : real
  requires {
    is_empty !st /\
    sampled d1 p1 /\ sampled d2 p2 /\
    (World !st interp) |= Know (var p1 =' var p2) /\
    (World !st interp) |= eq_variance p1 p2 /\
    non_paired d1 d2 /\
    (World !st interp) |= Possible (mean p1 <' mean p2) /\
    (World !st interp) |= Possible (mean p1 >' mean p2)
  }
  ensures {
    let p = result in
    Eq p = compose_pvs (mean p1 =!' mean p2) !st &&
    (World !st interp) |= StatB (Eq p) (mean p1 =!' mean p2)
  }
  = exec_ttest_ind_eq p1 p2 (d1, d2) Two

  let ex_ttest_ind_neq (d1 : list real) (d2 : list real) : real
  requires {
    is_empty !st /\
    sampled d1 p1 /\ sampled d2 p2 /\
    (World !st interp) |= Not (eq_variance p1 p2)
    /\ non_paired d1 d2 /\
    (World !st interp) |= Possible (mean p1 <' mean p2) /\
    (World !st interp) |= Possible (mean p1 >' mean p2)
  }
  ensures {
    let p = result in
    Eq p = compose_pvs (mean p1 =!' mean p2) !st &&
    (World !st interp) |= StatB (Eq p) (mean p1 =!' mean p2)
  }
  = exec_ttest_ind_neq p1 p2 (d1, d2) Two
end

module Ttest_paired
  use cameleerBHL.CameleerBHL
  use ttest.Ttest

  let function m1 : parameter = "mean1"
  let function m2 : parameter = "mean2"
  let function v1 : parameter = "var1"
  let function v2 : parameter = "var2"

  let function p1 = NormalD (Param m1) (Param v1)
  let function p2 = NormalD (Param m2) (Param v2)
  
  let ex_ttest_paired (d1 : list real) (d2 : list real) : real
  requires {
    is_empty !st /\
    sampled d1 p1 /\ sampled d2 p2 /\
    paired d1 d2 /\
    (World !st interp) |= Possible (mean p1 <' mean p2) /\
    (World !st interp) |= Possible (mean p1 >' mean p2)
  }
  ensures {
    let p = result in
    Eq p = compose_pvs (mean p1 =!' mean p2) !st &&
    (World !st interp) |= StatB (Eq p) (mean p1 =!' mean p2)
  }
  = exec_ttest_paired p1 p2 (d1, d2) Two
end
