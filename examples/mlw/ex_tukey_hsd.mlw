module Tukey_HSD_example
  use cameleerBHL.CameleerBHL
  use tukey_HSD.Tukey_HSD
  use array.Array

  let rec function nth_p (n : int) (l : list real) : real =
    match l with
    | Nil -> -1.0
    | Cons x r -> if n = 0 then x else nth_p (n - 1) r
    end

  let function mu1 : parameter = "mu1"
  let function mu2 : parameter = "mu2"
  let function mu3 : parameter = "mu3"
  let function mu4 : parameter = "mu4"
  let function mu5 : parameter = "mu5"
  let function mu6 : parameter = "mu6"
  let function mu7 : parameter = "mu7"
  let function mu8 : parameter = "mu8"
  let function mu9 : parameter = "mu9"
  
  let function p1 : population = NormalD (Param mu1) (Param "var")
  let function p2 : population = NormalD (Param mu2) (Param "var")
  let function p3 : population = NormalD (Param mu3) (Param "var")
  let function p4 : population = NormalD (Param mu4) (Param "var")
  let function p5 : population = NormalD (Param mu5) (Param "var")
  let function p6 : population = NormalD (Param mu6) (Param "var")
  let function p7 : population = NormalD (Param mu7) (Param "var")
  let function p8 : population = NormalD (Param mu8) (Param "var")
  let function p9 : population = NormalD (Param mu9) (Param "var")

  let function t_mu1 = RealT (mean p1)
  let function t_mu2 = RealT (mean p2)
  let function t_mu3 = RealT (mean p3)
  let function t_mu4 = RealT (mean p4)
  let function t_mu5 = RealT (mean p5)
  let function t_mu6 = RealT (mean p6)
  let function t_mu7 = RealT (mean p7)
  let function t_mu8 = RealT (mean p8)
  let function t_mu9 = RealT (mean p9)

  let function terms2 = (Cons t_mu1 (Cons t_mu2 Nil))

  let ex_tukey_hsd2 (d1 d2 : (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 Nil))
                 (Cons p1 (Cons p2 Nil)) /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms2 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms2 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms2 "!=") 0)
    }
    = exec_tukey_hsd (Cons p1 (Cons p2 Nil)) (Cons d1 (Cons d2 Nil))
  
  let function terms3 = (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 Nil)))

  let ex_tukey_hsd3 (d1 d2 d3 : (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 Nil)))
                 (Cons p1 (Cons p2 (Cons p3 Nil))) /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms3 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms3 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms3 "!=") 0)
    }
    = exec_tukey_hsd (Cons p1 (Cons p2 (Cons p3 Nil))) (Cons d1 (Cons d2 (Cons d3 Nil)))

  let function terms4 = (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 (Cons t_mu4 Nil))))

  let ex_tukey_hsd4 (d1 d2 d3 d4 : (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms4 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms4 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms4 "!=") 0)
    }
    = exec_tukey_hsd (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil))))

  let function terms5 = (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 (Cons t_mu4 (Cons t_mu5 Nil)))))
  
  let ex_tukey_hsd5 (d1 d2 d3 d4 d5 : (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms5 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms5 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms5 "!=") 0)
    }
    = exec_tukey_hsd (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
                     (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))

  let function terms6 = (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 (Cons t_mu4 (Cons t_mu5 (Cons t_mu6 Nil))))))
  
  let ex_tukey_hsd6 (d1 d2 d3 d4 d5 d6: (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 Nil))))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil)))))) /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms6 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms6 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms6 "!=") 0)
    }
    = exec_tukey_hsd (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil)))))) (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 Nil))))))

  let function terms7 =
    (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 (Cons t_mu4 (Cons t_mu5 (Cons t_mu6 (Cons t_mu7 Nil)))))))

  let ex_tukey_hsd7 (d1 d2 d3 d4 d5 d6 d7 : (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 Nil)))))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil))))))) /\
               for_all (fun fml -> (World !st interp) |= Possible fml ) (combinations terms7 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml ) (combinations terms7 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms7 "!=") 0)
    }
    = exec_tukey_hsd (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil))))))) (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 Nil)))))))

  let function terms9 =
    (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 (Cons t_mu4 (Cons t_mu5 (Cons t_mu6 (Cons t_mu7 (Cons t_mu8 (Cons t_mu9 Nil)))))))))

  let ex_tukey_hsd9 (d1 d2 d3 d4 d5 d6 d7 d8 d9 : (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 (Cons d8 (Cons d9 Nil)))))))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 (Cons p8 (Cons p9 Nil))))))))) /\
               for_all (fun fml -> (World !st interp) |= Possible fml ) (combinations terms9 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml ) (combinations terms9 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms9 "!=") 0)
    }
    = exec_tukey_hsd
        (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 (Cons p8 (Cons p9 Nil)))))))))
        (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 (Cons d8 (Cons d9 Nil)))))))))
end
