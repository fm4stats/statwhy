module Chi_square_example
  use cameleerBHL.CameleerBHL
  use chisquare.Chisquare
  
  let function p1 : real_number = Param "p1"
  let function p2 : real_number = Param "p2"
  let function p3 : real_number = Param "p3"
  let function p4 : real_number = Param "p4"

  val function q1 : real
  val function q2 : real
  val function q3 : real
  val function q4 : real
  
  let function p = CategoricalD (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil))))
  
  let function h = ((param_term p1) $!= (const_term q1)) $||
                   ((param_term p2) $!= (const_term q2)) $||
                   ((param_term p3) $!= (const_term q3)) $||
                   ((param_term p4) $!= (const_term q4))
  
  let ex_chisquare (d : list int)
    requires { is_empty !st /\
               length d = 4 /\
               let size = from_int (sum d) in
               (q1 *. size >=. 5.0) /\
               (q2 *. size >=. 5.0) /\
               (q3 *. size >=. 5.0) /\
               (q4 *. size >=. 5.0) /\
               is_prob_dist (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) (World !st interp) /\
               is_prob_dist_const (Cons q1 (Cons q2 (Cons q3 (Cons q4 Nil)))) /\
               ((World !st interp) |= Possible (param_term p1 $< const_term q1)) /\
               ((World !st interp) |= Possible (param_term p1 $> const_term q1)) /\
               ((World !st interp) |= Possible (param_term p2 $< const_term q2)) /\
               ((World !st interp) |= Possible (param_term p2 $> const_term q2)) /\
               ((World !st interp) |= Possible (param_term p3 $< const_term q3)) /\
               ((World !st interp) |= Possible (param_term p3 $> const_term q3)) /\
               ((World !st interp) |= Possible (param_term p4 $< const_term q4)) /\
               ((World !st interp) |= Possible (param_term p4 $> const_term q4))
             }
    ensures {
      let p = result in
      Eq p = compose_pvs h !st &&
      (World !st interp) |= StatB (Eq p) h
    }
    = exec_chisquare_test p (Cons q1 (Cons q2 (Cons q3 (Cons q4 Nil)))) d
end
