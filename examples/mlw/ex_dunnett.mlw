module Dunnett_example
  use cameleerBHL.CameleerBHL
  use dunnett.Dunnett
  use array.Array

  let function mu0 = "mu0"
  let function p0  = NormalD (Param mu0) (Const 1.0)
  let function t_mu0 = RealT (mean p0)

  let function mu1 = "mu1"
  let function mu2 = "mu2"
  let function mu3 = "mu3"
  let function mu4 = "mu4"
  let function mu5 = "mu5"
  let function mu6 = "mu6"
  let function mu7 = "mu7"

  let function p1 = NormalD (Param mu1) (Const 1.0)
  let function p2 = NormalD (Param mu2) (Const 1.0)
  let function p3 = NormalD (Param mu3) (Const 1.0)
  let function p4 = NormalD (Param mu4) (Const 1.0)
  let function p5 = NormalD (Param mu5) (Const 1.0)
  let function p6 = NormalD (Param mu6) (Const 1.0)
  let function p7 = NormalD (Param mu7) (Const 1.0)

  let ex_dunnett1 (d1 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 Nil)
                 (Cons p1 Nil) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 Nil)
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate (Cons p1 Nil) 0)
    }
    = exec_dunnett (Cons p1 Nil) p0 (Cons d1 Nil) c Two

  let ex_dunnett2 (d1 d2 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 Nil))
                 (Cons p1 (Cons p2 Nil)) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 Nil))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate (Cons p1 (Cons p2 Nil)) 0)
    }
    = exec_dunnett (Cons p1 (Cons p2 Nil)) p0 (Cons d1 (Cons d2 Nil)) c Two

  let ex_dunnett3 (d1 d2 d3 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 Nil)))
                 (Cons p1 (Cons p2 (Cons p3 Nil))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 Nil)))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate (Cons p1 (Cons p2 (Cons p3 Nil))) 0)
    }
    = exec_dunnett (Cons p1 (Cons p2 (Cons p3 Nil))) p0 (Cons d1 (Cons d2 (Cons d3 Nil))) c Two

  let ex_dunnett4 (d1 d2 d3 d4 : (list real)) (c : list real) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil))))
                0)
    }
    = exec_dunnett (Cons p1 (Cons p2 (Cons p3 (Cons p4 Nil)))) p0 (Cons d1 (Cons d2 (Cons d3 (Cons d4 Nil)))) c Two

  let ex_dunnett5 (d1 d2 d3 d4 d5 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
                0)
    }
    = exec_dunnett (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) p0
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil))))) c Two

  let ex_dunnett6 (d1 d2 d3 d4 d5 d6 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 Nil))))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil)))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil))))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil))))))
                0)
    }
    = exec_dunnett (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 Nil)))))) p0
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 Nil)))))) c Two

  let ex_dunnett7 (d1 d2 d3 d4 d5 d6 d7 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 Nil)))))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil))))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil)))))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil)))))))
                0)
    }
    = exec_dunnett
        (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 (Cons p6 (Cons p7 Nil))))))) p0
        (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 (Cons d6 (Cons d7 Nil))))))) c Two
end
