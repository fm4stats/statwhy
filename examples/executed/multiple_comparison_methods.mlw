module Tukey_HSD_example
  use cameleerBHL.CameleerBHL
  use tukey_HSD.Tukey_HSD
  use array.Array

  let function mu1 : parameter = "mu1"
  let function mu2 : parameter = "mu2"
  let function mu3 : parameter = "mu3"
  let function mu4 : parameter = "mu4"
  let function mu5 : parameter = "mu5"
  
  let function p1 : population = NormalD (Param mu1) (Param "var")
  let function p2 : population = NormalD (Param mu2) (Param "var")
  let function p3 : population = NormalD (Param mu3) (Param "var")
  let function p4 : population = NormalD (Param mu4) (Param "var")
  let function p5 : population = NormalD (Param mu5) (Param "var")


  let function t_mu1 = RealT (mean p1)
  let function t_mu2 = RealT (mean p2)
  let function t_mu3 = RealT (mean p3)
  let function t_mu4 = RealT (mean p4)
  let function t_mu5 = RealT (mean p5)

  let function terms5 = (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 (Cons t_mu4 (Cons t_mu5 Nil)))))
  
  let ex_tukey_hsd5 (d1 d2 d3 d4 d5 : (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms5 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms5 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms5 "!=") 0)
    }
    = exec_tukey_hsd (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
                     (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
end


module Dunnett_example
  use cameleerBHL.CameleerBHL
  use dunnett.Dunnett
  use array.Array

  let function mu0 = "mu0"
  let function p0  = NormalD (Param mu0) (Const 1.0)
  let function t_mu0 = RealT (mean p0)

  let function mu1 = "mu1"
  let function mu2 = "mu2"
  let function mu3 = "mu3"
  let function mu4 = "mu4"
  let function mu5 = "mu5"


  let function p1 = NormalD (Param mu1) (Const 1.0)
  let function p2 = NormalD (Param mu2) (Const 1.0)
  let function p3 = NormalD (Param mu3) (Const 1.0)
  let function p4 = NormalD (Param mu4) (Const 1.0)
  let function p5 = NormalD (Param mu5) (Const 1.0)




  let ex_dunnett5 (d1 d2 d3 d4 d5 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
                0)
    }
    = exec_dunnett (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) p0
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil))))) c Two
end


module Williams_example
  use cameleerBHL.CameleerBHL
  use williams.Williams
  use array.Array

  let function mu0 = "mu0"
  let function p0  = NormalD (Param mu0) (Const 1.0)
  let function t_mu0 = RealT (mean p0)

  let function mu1 = "mu1"
  let function mu2 = "mu2"
  let function mu3 = "mu3"
  let function mu4 = "mu4"
  let function mu5 = "mu5"


  let function p1 = NormalD (Param mu1) (Const 1.0)
  let function p2 = NormalD (Param mu2) (Const 1.0)
  let function p3 = NormalD (Param mu3) (Const 1.0)
  let function p4 = NormalD (Param mu4) (Const 1.0)
  let function p5 = NormalD (Param mu5) (Const 1.0)


  let ex_williams5 (d1 d2 d3 d4 d5 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= Not (Possible (mean p0 $< mean p)) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               ((World !st interp) |= Know (mean p1 $<= mean p2)) /\
               ((World !st interp) |= Know (mean p2 $<= mean p3)) /\
               ((World !st interp) |= Know (mean p3 $<= mean p4)) /\
               ((World !st interp) |= Know (mean p4 $<= mean p5)) /\
               ((World !st interp) |= Know (mean p5 $<= mean p0))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $> mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $> mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
                0)
    }
    = exec_williams (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) p0
                   (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil))))) c Up
end


module Steel_Dwass_example
  use cameleerBHL.CameleerBHL
  use steel_dwass.Steel_Dwass
  use array.Array

  let function p1 : population = UnknownD "p1"
  let function p2 : population = UnknownD "p2"
  let function p3 : population = UnknownD "p3"
  let function p4 : population = UnknownD "p4"
  let function p5 : population = UnknownD "p5"


  let function t_mu1 = RealT (mean p1)
  let function t_mu2 = RealT (mean p2)
  let function t_mu3 = RealT (mean p3)
  let function t_mu4 = RealT (mean p4)
  let function t_mu5 = RealT (mean p5)


  let function terms5 = (Cons t_mu1 (Cons t_mu2 (Cons t_mu3 (Cons t_mu4 (Cons t_mu5 Nil)))))
  
  let ex_steel_dwass5 (d1 d2 d3 d4 d5: (list real)) : array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               (World !st interp) |= eq_variance p1 p2 /\
               (World !st interp) |= eq_variance p2 p3 /\
               (World !st interp) |= eq_variance p3 p4 /\
               (World !st interp) |= eq_variance p4 p5 /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms5 "<") /\
               for_all (fun fml -> (World !st interp) |= Possible fml) (combinations terms5 ">")
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,fml) = t in
                (Eq (ps[i]) = compose_pvs fml !st) &&
                (World !st interp |= StatB (Eq (ps[i])) fml))
              (enumerate (combinations terms5 "!=") 0)
    }
    = exec_steel_dwass (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
end


module Steel_example
  use cameleerBHL.CameleerBHL
  use steel.Steel
  use array.Array

  let function p0  = UnknownD "p0"
  let function t_mu0 = RealT (mean p0)

  let function p1 = UnknownD "p1"
  let function p2 = UnknownD "p2"
  let function p3 = UnknownD "p3"
  let function p4 = UnknownD "p4"
  let function p5 = UnknownD "p5"


  let ex_steel5 (d1 d2 d3 d4 d5 : (list real)) (c : list real): array real
    requires { !st = Nil /\
               for_all2
                 sampled
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil)))))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               sampled c p0 /\
               for_all
                 (fun p -> (World !st interp) |= eq_variance p0 p)
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) /\
               for_all
                 (fun p -> (World !st interp) |= Possible (mean p0 $< mean p) /\
                           (World !st interp) |= Possible (mean p0 $> mean p))
                 (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
             }
    ensures {
      let ps = result in
      for_all (fun t -> let (i,p) = t in
                (Eq (ps[i]) = compose_pvs (mean p0 $!= mean p) !st) &&
                (World !st interp |= StatB (Eq (ps[i])) (mean p0 $!= mean p)))
              (enumerate
                (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil)))))
                0)
    }
    = exec_steel (Cons p1 (Cons p2 (Cons p3 (Cons p4 (Cons p5 Nil))))) p0
                 (Cons d1 (Cons d2 (Cons d3 (Cons d4 (Cons d5 Nil))))) c Two
end
